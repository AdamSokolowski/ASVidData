
package pl.ASVidBuild.PanelController;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.ListView;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.stage.FileChooser;
import pl.ASVidBuild.PanelController.MainScreenController;
import pl.ASVidBuild.PlaylistConvert.*;

public class ExplorerScreenController {

	@FXML
	private Button menuButton;

	@FXML
	private Button openListWMPlayer;

	@FXML
	private Button openListMPClassic;

	@FXML
	private MediaView mainMediaView;

	@FXML
	private ListView vidPlayList;

	@FXML
	private ContextMenu vidPlayListMenu;

	private MediaPlayer mediaPlayer;

	private String selectedFilePath = "";
	
	private String appPath ="";

	private MainScreenController mainScreenController;

	public void setMainScreenController(MainScreenController mainScreenController) {
		this.mainScreenController = mainScreenController;
		try {
			appPath = new File(".").getCanonicalPath();
		} catch (IOException e) {}
		
		vidPlayList.setItems(FXCollections.observableArrayList(LastPlayList.load(appPath+"\\LastPlaylist.asvpl")));
		System.out.println("Loaded list - "+ appPath+"\\LastPlaylist.asvpl");
	}

	@FXML
	void menuButtonClick(ActionEvent event) {
		String[] listItems = new String[vidPlayList.getItems().size()];
		listItems = (String[]) vidPlayList.getItems().toArray(listItems);
		LastPlayList.save(listItems, appPath+"\\LastPlaylist.asvpl");
		System.out.println("Saved list - "+ appPath+"\\LastPlaylist.asvpl");
		mainScreenController.loadMainMenu();

	}

	@FXML
	void openListMPClassicClick(ActionEvent event) {
		mediaPlayerListGenAndPlay("Media Player Classic");
	}

	@FXML
	void openListWMPlayerClick(ActionEvent event) {
		mediaPlayerListGenAndPlay("Windows Media Player");

	}

	public void mediaPlayerListGenAndPlay(String mediaPlayerType) {
		String[] listItems = new String[vidPlayList.getItems().size()];
		for (int i = 0; i < listItems.length; i++) {
			listItems[i] = vidPlayList.getItems().get(i).toString();
		}
		String appPath = "";
		try {
			appPath = new File(".").getCanonicalPath();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (mediaPlayerType == "Windows Media Player") {
			WindowsMediaPlayerListGenerator.create(listItems, "ASVidData Autogenerated List",
					appPath + "\\WMPlist.wpl");
			launchExternalProg("C:/Program Files (x86)/Windows Media Player/wmplayer", appPath + "\\WMPlist.wpl");
		} else {
			if (mediaPlayerType == "Media Player Classic") {
				MediaPlayerClassicListGenerator.create(listItems, "ASVidData Autogenerated List",
						appPath + "\\MPClist.mpcpl");
				launchExternalProg("C:/Program Files (x86)/K-Lite Codec Pack/MPC-HC64/mpc-hc64",
						appPath + "\\MPClist.mpcpl");

			}
		}
	}

	@FXML
	void menuPlayMPClassicClick(ActionEvent event) {
		launchExternalProg("C:/Program Files (x86)/K-Lite Codec Pack/MPC-HC64/mpc-hc64",
				vidPlayList.getSelectionModel().getSelectedItem().toString());
	}

	@FXML
	void menuPlayWMPlayerClick(ActionEvent event) {
		launchExternalProg("C:/Program Files (x86)/Windows Media Player/wmplayer",
				vidPlayList.getSelectionModel().getSelectedItem().toString());

	}

	public void launchExternalProg(String progPath, String filePath) {
		Process process;

		try {
			String command = "\"" + progPath + "\" \"" + filePath + "\"";
			System.out.println("Launched command - " + command);
			process = Runtime.getRuntime().exec(command);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@FXML
	void menuAddFileToPlayListClick(ActionEvent event) {
		FileChooser fileChooser = new FileChooser();
		FileChooser.ExtensionFilter filterMp4 = new FileChooser.ExtensionFilter("mpeg4", "*.mp4");
		FileChooser.ExtensionFilter filterAvi = new FileChooser.ExtensionFilter("Avi", "*.avi");
		FileChooser.ExtensionFilter filterAll = new FileChooser.ExtensionFilter("All Files", "*.*");

		fileChooser.getExtensionFilters().addAll(filterMp4, filterAvi, filterAll);
		File file = fileChooser.showOpenDialog(null);

		if (file != null) {
			// String filePath = file.toURI().toString();
			String filePath = file.getAbsolutePath();
			vidPlayList.getItems().add(filePath);
		}

	}

	@FXML
	void vidPlayListClick(MouseEvent event) {
		if (event.getButton().equals(MouseButton.PRIMARY) && vidPlayList.getItems().isEmpty() == false) {

			try {
				Path path = Paths.get(vidPlayList.getSelectionModel().getSelectedItem().toString());
				String filePath = path.toUri().toString();
				if (selectedFilePath.compareTo(filePath) != 0) {
					if (mediaPlayer != null) {
						mediaPlayer.stop();
					}
					selectedFilePath = filePath;
					System.out.println("Opened file in MediaPlayer - " + filePath);
					Media media = new Media(filePath);
					mediaPlayer = new MediaPlayer(media);
					mainMediaView.setMediaPlayer(mediaPlayer);
					mediaPlayer.play();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

}
